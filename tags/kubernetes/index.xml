<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kubernetes on Linuxera</title>
    <link>https://linuxera.org/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Linuxera</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://linuxera.org/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get data from an etcd backup (encrypted or not!)</title>
      <link>https://linuxera.org/get-data-from-encrypted-etcd-backup/</link>
      <pubDate>Thu, 02 Oct 2025 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/get-data-from-encrypted-etcd-backup/</guid>
      <description>Get data from an etcd backup (encrypted or not!) The following post aims to provide a step by step procedure to recover data from an etcd snapshot (even if itâ€™s encrypted) from a Kubernetes cluster.
The post targets the following use cases:
We have a non-encrypted etcd snapshot file, and we want to get some data from it. We have an encrypted etcd snapshot file, and we want to get some data from it.</description>
    </item>
    
    <item>
      <title>Gateway API for Kubernetes</title>
      <link>https://linuxera.org/gateway-api-kubernetes/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/gateway-api-kubernetes/</guid>
      <description>Gateway API for Kubernetes In this post we will go over a new project by the SIG-NETWORK that aims to evolve Kubernetes service networking.
I&amp;rsquo;ll be using a Kubernetes v1.26 (latest at the time of this writing). The tool used to create the cluster is kcli and the command used was:
kcli create kube generic -P ctlplanes=1 -P workers=1 -P ctlplane_memory=4096 -P numcpus=8 -P worker_memory=8192 -P image=fedora37 -P sdn=calico -P version=1.</description>
    </item>
    
    <item>
      <title>CPU and Memory Management on Kubernetes with Cgroupsv2</title>
      <link>https://linuxera.org/cpu-memory-management-kubernetes-cgroupsv2/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/cpu-memory-management-kubernetes-cgroupsv2/</guid>
      <description>CPU and Memory Management on Kubernetes with Cgroupsv2 In this post I&amp;rsquo;ll try to explain how CPU and Memory management works under the hood on Kubernetes. If you ever wondered what happens when you set requests and limits for your pods, keep reading!
Attention
This is the result of my exploratory work around cgroupsv2 and their application to Kubernetes. Even though I tried really hard to make sure the information in this post is accurate, I&amp;rsquo;m far from being an expert on the topic and some information may not be 100% accurate.</description>
    </item>
    
    <item>
      <title>Exposing multiple Kubernetes clusters with a single load balancer and a single public IP</title>
      <link>https://linuxera.org/exposing-multiple-kubernetes-clusters-single-lb-and-ip/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/exposing-multiple-kubernetes-clusters-single-lb-and-ip/</guid>
      <description>Exposing multiple Kubernetes clusters with a single load balancer and a single public IP My colleague Alberto Losada and I have been working on a lab lately. The lab is composed of three OpenShift clusters on VMs, these VMs are deployed on an isolated libvirt network, which means that we cannot access them from outside the hypervisor.
In order to solve this issue, we wanted to expose the three clusters using the public IP available in the hypervisor.</description>
    </item>
    
    <item>
      <title>Working with Pod Security Standards</title>
      <link>https://linuxera.org/working-with-pod-security-standards/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/working-with-pod-security-standards/</guid>
      <description>Working with Pod Security Standards In Kubernetes v1.25 Pod Security admission has moved to stable, replacing Pod Security Policy admission. This feature has been in beta and enabled by default since Kubernetes v1.23 in this post we are going to cover what&amp;rsquo;s new with Pod Security Admission (PSA) and how it affects the workloads being deployed in our clusters.
Note
For this post I&amp;rsquo;ll be running a Kubernetes v1.25 cluster. If you want to try this in your own environment you can use your favorite tool to get a K8s cluster up and running, I&amp;rsquo;ll be using kcli.</description>
    </item>
    
    <item>
      <title>Capabilities and Seccomp Profiles on Kubernetes</title>
      <link>https://linuxera.org/capabilities-seccomp-kubernetes/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/capabilities-seccomp-kubernetes/</guid>
      <description>Capabilities and Seccomp Profiles on Kubernetes In a previous post we talked about Linux Capabilities and Secure Compute Profiles, in this post we are going to see how we can leverage them on Kubernetes.
We will need a Kubernetes cluster, I&amp;rsquo;m going to use kcli in order to get one. Below command will deploy a Kubernetes cluster on VMs:
NOTE: You can create a parameters file with the cluster configuration as well.</description>
    </item>
    
    <item>
      <title>Container Security - Linux Capabilities and Secure Compute Profiles</title>
      <link>https://linuxera.org/container-security-capabilities-seccomp/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/container-security-capabilities-seccomp/</guid>
      <description>Container Security - Linux Capabilities and Secure Compute Profiles In this post we are going to see two security mechanisms used in Linux Containers in order to provide a security layer for our workloads.
We will see how Linux Capabilities and Secure Compute Profiles can be used for limiting the attack surface for our containers.
The first part of the blog post will be an introduction to Linux Capabilities and Secure Compute Profiles, second part will show how these technologies work through the use of demos.</description>
    </item>
    
    <item>
      <title>Integrating our Operators with OLM</title>
      <link>https://linuxera.org/integrating-operators-olm/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/integrating-operators-olm/</guid>
      <description>Introduction This post is a continuation of our previous blog Writing Operators using the Operator Framework SDK.
We will continue working on the operator created on the previous blog, if you want to be able to follow this blog, you will need to run the steps from the previous blog.
Operator Lifecycle Manager The Operator Lifecycle Manager is an open source toolkit to manage Operators in an effective, automated and scalable way.</description>
    </item>
    
    <item>
      <title>Using OpenShift OAuth Proxy to secure your Applications on OpenShift</title>
      <link>https://linuxera.org/oauth-proxy-secure-applications-openshift/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/oauth-proxy-secure-applications-openshift/</guid>
      <description>What is OAuth Proxy A reverse proxy and static file server that provides authentication and authorization to an OpenShift OAuth server or Kubernetes master supporting the 1.6+ remote authorization endpoints to validate access to content. It is intended for use withing OpenShift clusters to make it easy to run both end-user and infrastructure services that do not provider their own authentication.
[Source]
Securing an Application with OAuth Proxy In this blog post we are going to deploy OAuth Proxy in front of a simple application.</description>
    </item>
    
    <item>
      <title>Writing Operators using the Operator Framework SDK</title>
      <link>https://linuxera.org/writing-operators-using-operator-framework/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/writing-operators-using-operator-framework/</guid>
      <description>Operators, operators everywhere As you may have noticed, Kubernetes operators are becoming more an more popular those days. In this post we are going to explain the basics around Operators and we will develop a simple Operator using the Operator Framework SDK.
What is an Operator An operator aims to automate actions usually performed manually while lessening the likelihood of error and simplifying complexity.
We can think of an operator as a method of packaging, deploying and managing a Kubernetes enabled application.</description>
    </item>
    
  </channel>
</rss>
